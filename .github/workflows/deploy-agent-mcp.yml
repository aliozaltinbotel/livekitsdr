name: Deploy Agent to Production

on:
  push:
    branches:
      - main
    paths:
      - 'agent/**'
      - '.github/workflows/deploy-agent-mcp.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: livekitsdr-rg
  ACR_NAME: livekitsdracr
  AGENT_CONTAINER_NAME: livekitsdr-agent-container

jobs:
  build-and-deploy:
    name: Build and Deploy Agent with MCP
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Google service account JSON from secret
        working-directory: ./agent
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}' > botelai-d95567fc3ae3.json
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./agent
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/livekitsdr-agent:latest
            ${{ env.ACR_NAME }}.azurecr.io/livekitsdr-agent:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/livekitsdr-agent:buildcache
          cache-to: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/livekitsdr-agent:buildcache,mode=max
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Azure Container Instances
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Delete existing container if it exists
            az container delete \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AGENT_CONTAINER_NAME }} \
              --yes || true
            
            # Wait for deletion
            sleep 10
            
            # Create new container instance with both agent and MCP server
            az container create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AGENT_CONTAINER_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/livekitsdr-agent:${{ github.sha }} \
              --registry-login-server ${{ env.ACR_NAME }}.azurecr.io \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --environment-variables \
                LIVEKIT_URL="${{ secrets.LIVEKIT_URL }}" \
                LIVEKIT_API_KEY="${{ secrets.LIVEKIT_API_KEY }}" \
                LIVEKIT_API_SECRET="${{ secrets.LIVEKIT_API_SECRET }}" \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                ASSEMBLYAI_API_KEY="${{ secrets.ASSEMBLYAI_API_KEY }}" \
                CARTESIA_API_KEY="${{ secrets.CARTESIA_API_KEY }}" \
                GOOGLE_SERVICE_ACCOUNT_KEY="/app/botelai-d95567fc3ae3.json" \
                GOOGLE_CALENDAR_ID="${{ secrets.GOOGLE_CALENDAR_ID }}" \
                GOOGLE_DELEGATED_USER_EMAIL="${{ secrets.GOOGLE_DELEGATED_USER_EMAIL }}" \
                SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
                SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
                PMS_BASE_URL="${{ secrets.PMS_BASE_URL }}" \
                PMS_API_KEY="${{ secrets.PMS_API_KEY }}" \
                ENVIRONMENT="production" \
                LOG_LEVEL="INFO" \
              --cpu 1.5 \
              --memory 2 \
              --restart-policy Always \
              --os-type Linux \
              --location eastus
      
      - name: Show deployment status
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            echo "=== Container Status ==="
            az container show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AGENT_CONTAINER_NAME }} \
              --query "{Status:instanceView.state, Events:instanceView.events[*].{message:message, count:count}}"
  
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Check container health
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Check container status
            status=$(az container show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AGENT_CONTAINER_NAME }} \
              --query "instanceView.state" -o tsv 2>/dev/null || echo "NotFound")
            
            if [ "$status" = "Running" ]; then
              echo "✅ Container is running"
              
              # Check if health check is passing
              echo "Checking container logs for service status..."
              az container logs \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --name ${{ env.AGENT_CONTAINER_NAME }} \
                --tail 50 | grep -E "(MCP server is ready|Starting LiveKit agent)" || true
              
              exit 0
            else
              echo "❌ Container status: $status"
              echo "Deployment validation failed!"
              exit 1
            fi